#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// --- Configuração da Rede ---
const char *ssid = "Carro_ESP01s";
const char *password = "12345678";
ESP8266WebServer server(80);

// --- Configuração dos Pinos ---
#define PINO_IN1 0  // Motor Esquerdo - Frente (GPIO0 - Cuidado com Pull-Up!)
#define PINO_IN2 2  // Motor Esquerdo - Trás (GPIO2)
#define PINO_IN3 1  // Motor Direito - Frente (GPIO1 - TX)
#define PINO_IN4 3  // Motor Direito - Trás (GPIO3 - RX)
#define VELOCIDADE_MAX 1023 

// --- [HTML ATUALIZADO] ---
const char *HTML_CONTROLE = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
    <title>Controle Hoover V1</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400&display=swap" rel="stylesheet">
    
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        html, body {
            height: 100vh;
            font-family: 'Montserrat', sans-serif;
            background-color: #1d2d3a;
            color: #f0f0f0;
            overflow: hidden;
        }
        
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        h1 {
            font-weight: 300;
            letter-spacing: 3px;
            text-transform: uppercase;
            font-size: 1.8em;
            margin-bottom: 30px;
            color: #0099ff;
        }

        #joystick-container {
            position: relative;
            width: 280px;
            height: 280px;
            background: linear-gradient(145deg, #20313f, #1a2933);
            border-radius: 50%;
            border: 3px solid #2a3c4b;
            box-shadow: inset 0 5px 25px rgba(0,0,0,0.4), 
                        0 0 25px rgba(0,120,220,0.2);
        }

        #status {
            font-weight: 400;
            font-size: 1em;
            color: #8899a6; 
            margin-top: 40px;
            height: 1.2em;
        }

        /* === [NOVO] ESTILO DA BARRA DE ACELERAÇÃO === */
        #gauge-label {
            font-size: 0.9em;
            color: #8899a6;
            margin-top: 25px;
            font-weight: 300;
        }
        #gauge-container {
            width: 80%;
            max-width: 280px; /* Mesma largura do joystick */
            height: 20px;
            background-color: #1a2933; /* Fundo escuro da barra */
            border: 2px solid #2a3c4b;
            border-radius: 10px;
            margin-top: 10px;
            overflow: hidden; /* Para conter a barra interna */
        }
        #gauge-bar {
            width: 0%; /* Começa em 0% */
            height: 100%;
            background-color: #0099ff; /* Cor da barra (azul) */
            border-radius: 7px;
            /* Animação suave */
            transition: width 0.1s linear; 
        }

    </style>
</head>
<body>
    <h1>HOOVER V1</h1>
    
    <div id="joystick-container"></div>
    
    <h3 id="status">Status: Parado</h3>

    <div id="gauge-label">Acelerador</div>
    <div id="gauge-container">
        <div id="gauge-bar"></div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/nipplejs/0.10.1/nipplejs.min.js"></script>

    <script>
        const statusEl = document.getElementById('status');
        // --- [NOVO] Pega o elemento da barra ---
        const gaugeBarEl = document.getElementById('gauge-bar');
        
        let lastX = 0;
        let lastY = 0;

        var options = {
            zone: document.getElementById('joystick-container'),
            mode: 'static',
            position: { left: '50%', top: '50%' },
            color: '#0099ff',
            frontColor: 'rgba(255,255,255,0.7)',
            size: 180,
            threshold: 0.1,
            restJoystick: true
        };
        
        var joy = nipplejs.create(options);

        // --- [MODIFICADO] Função de enviar comando ---
        async function enviarComando(x, y) {
            lastX = x;
            lastY = y;

            // 1. Atualiza o Status (Movendo/Parado)
            if (x === 0 && y === 0) {
                statusEl.innerText = "Status: Parado";
            } else {
                statusEl.innerText = "Status: Movendo";
            }

            // 2. Atualiza a Barra de Aceleração
            // Math.abs(y) pega o valor absoluto (ignora se é frente ou trás)
            // e multiplica por 100 para virar porcentagem.
            let velocidadePercent = Math.abs(y) * 100;
            gaugeBarEl.style.width = velocidadePercent + '%';
            
            // 3. Envia o comando para o ESP
            try {
                await fetch(`/joy?x=${x}&y=${y}`);
            } catch (e) {
                statusEl.innerText = "Erro de conexao!";
                gaugeBarEl.style.width = '0%'; // Zera a barra se der erro
            }
        }
        // --- Fim da modificação ---


        // Evento quando o joystick é movido
        joy.on('move', function (evt, data) {
            if (data.distance === 0) return;
            
            let x = (data.distance / 100.0) * Math.cos(data.angle.radian);
            let y = (data.distance / 100.0) * Math.sin(data.angle.radian);
            
            enviarComando(x, y);
        });

        // Evento quando o joystick é solto (volta ao centro)
        joy.on('end', function () {
            enviarComando(0, 0); // Envia (0, 0) para parar o carro
        });

    </script>
</body>
</html>
)rawliteral";


// --- Funções de Controle dos Motores (SEM MUDANÇAS) ---
void controlarMotores(float x, float y) {
    int velocidadeFrente = y > 0 ? map(y * 100, 0, 100, 0, VELOCIDADE_MAX) : 0;
    int velocidadeTras = y < 0 ? map(y * -100, 0, 100, 0, VELOCIDADE_MAX) : 0;
    float ganhoDirecao = x;
    int velMotorEsquerdo = 0;
    int velMotorDireito = 0;

    if (y > 0) { // FRENTE
        if (x > 0) { // Virar Direita
            velMotorEsquerdo = velocidadeFrente;
            velMotorDireito = velocidadeFrente * (1.0 - ganhoDirecao);
        } else { // Virar Esquerda
            velMotorEsquerdo = velocidadeFrente * (1.0 + ganhoDirecao);
            velMotorDireito = velocidadeFrente;
        }
    } else if (y < 0) { // TRÁS
        if (x > 0) { // Virar Direita (em ré)
            velMotorEsquerdo = velocidadeTras;
            velMotorDireito = velocidadeTras * (1.0 - ganhoDirecao);
        } else { // Virar Esquerda (em ré)
            velMotorEsquerdo = velocidadeTras * (1.0 + ganhoDirecao);
            velMotorDireito = velocidadeTras;
        }
    } else { // Girar no Eixo
        if (x > 0) { // Girar Direita
            int velGiro = map(x * 100, 0, 100, 0, VELOCIDADE_MAX);
            analogWrite(PINO_IN2, 0); 
            analogWrite(PINO_IN1, velGiro);
            analogWrite(PINO_IN3, 0);
            analogWrite(PINO_IN4, velGiro);
            return;
        } else if (x < 0) { // Girar Esquerda
            int velGiro = map(x * -100, 0, 100, 0, VELOCIDADE_MAX);
            analogWrite(PINO_IN1, 0);
            analogWrite(PINO_IN2, velGiro);
            analogWrite(PINO_IN4, 0);
            analogWrite(PINO_IN3, velGiro);
            return;
        }
    }

    // Motor Esquerdo
    if (velocidadeFrente > 0) {
        analogWrite(PINO_IN2, 0);
        analogWrite(PINO_IN1, velMotorEsquerdo);
    } else if (velocidadeTras > 0) {
        analogWrite(PINO_IN1, 0);
        analogWrite(PINO_IN2, velMotorEsquerdo);
    } else {
        analogWrite(PINO_IN1, 0);
        analogWrite(PINO_IN2, 0);
    }

    // Motor Direito
    if (velocidadeFrente > 0) {
        analogWrite(PINO_IN4, 0);
        analogWrite(PINO_IN3, velMotorDireito);
    } else if (velocidadeTras > 0) {
        analogWrite(PINO_IN3, 0);
        analogWrite(PINO_IN4, velMotorDireito);
    } else {
        analogWrite(PINO_IN3, 0);
        analogWrite(PINO_IN4, 0);
    }
}

// --- Funções do Servidor Web (SEM MUDANÇAS) ---
void handleRoot() {
  server.send(200, "text/html", HTML_CONTROLE);
}
void handleJoy() {
    float x = 0;
    float y = 0;
    if (server.hasArg("x")) { x = server.arg("x").toFloat(); }
    if (server.hasArg("y")) { y = server.arg("y").toFloat(); }
    controlarMotores(x, y);
    server.send(200, "text/plain", "OK");
}
void handleNotFound() {
  server.send(404, "text/plain", "Nao encontrado");
}

// --- SETUP (SEM MUDANÇAS) ---
void setup() {
  pinMode(PINO_IN1, OUTPUT);
  pinMode(PINO_IN2, OUTPUT);
  pinMode(PINO_IN3, OUTPUT);
  pinMode(PINO_IN4, OUTPUT);
  analogWrite(PINO_IN1, 0);
  analogWrite(PINO_IN2, 0);
  analogWrite(PINO_IN3, 0);
  analogWrite(PINO_IN4, 0);
  analogWriteRange(VELOCIDADE_MAX);
  WiFi.softAP(ssid, password);
  server.on("/", HTTP_GET, handleRoot);
  server.on("/joy", HTTP_GET, handleJoy);
  server.onNotFound(handleNotFound);
  server.begin();
}

// --- LOOP (SEM MUDANÇAS) ---
void loop() {
  server.handleClient();
}